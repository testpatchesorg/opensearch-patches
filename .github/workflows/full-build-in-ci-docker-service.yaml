---

name: "Build OpenSearch in CI Docker"
on:
  workflow_dispatch:
    inputs:
      open-search-tag:
        type: string
        required: true
        description: "Tag in the opensearch-project/OpenSearch repository"
        default: "2.19.3"
      patches-dir:
        type: string
        description: "Direcory in this repository with patches"
        required: true
        default: "patches/2.19.3"
      tags:
        type: string
        description: "Comma separated list of tags to tag produced docker image"
        required: false
        default: ""
      integration-tests:
        type: boolean
        description: "Whether to trigger opensearch integration tests (may take a while)"
        required: false
        default: false
      docker-test:
        type: boolean
        description: "Whether to run docker image tests after build"
        required: false
        default: true
      trigger-qubership-opensearch-build:
        type: boolean
        description: "Trigger qubership-opensearch build"
        default: true
        required: false
permissions:
  contents: read
env:
  custom_branch: "applied-patches-${{ github.event.inputs.open-search-tag }}-${{ github.run_id }}"
  default_custom_tag: "ghcr.io/${{ github.repository_owner }}/opensearch:${{ github.event.inputs.open-search-tag }}-custom-patches"

jobs:
  apply-patches:
    permissions:
      contents: write
    name: "Apply custom patches to OpenSearch"
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout OpenSearch"
        uses: actions/checkout@v5
        with:
          repository: opensearch-project/opensearch
          ref: ${{ inputs.open-search-tag }}
          path: opensearch
      - name: "Checkout this repository"
        uses: actions/checkout@v5
        with:
          ref: ${{ github.ref }}
          path: opensearch-custom-patches
      - name: "Apply patches"
        run: |
          cd ${GITHUB_WORKSPACE}/opensearch
          for p in ../opensearch-custom-patches/${{ inputs.patches-dir }}/*.patch; do
            echo "Applying $pâ€¦"
            git apply -p1 --ignore-space-change --ignore-whitespace "$p"
          done
      - name: Create a new branch and commit changes
        run: |
          cd ${GITHUB_WORKSPACE}/opensearch-custom-patches
          #rm -rf opensearch
          mv -f ${GITHUB_WORKSPACE}/opensearch/* .
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"
          git checkout -b "${{ env.custom_branch }}"
          git add .
          git commit -m "Applied custom patches to OpenSearch ${{ inputs.open-search-tag }}"
          git push origin "${{ env.custom_branch }}"

  build-in-docker:
    needs: apply-patches
    runs-on: ${{ matrix.platform.name }}
    name: "${{ matrix.platform.architecture }} Build OpenSearch on ${{ matrix.platform.name }}"
    strategy:
      fail-fast: false
      matrix:
        platform:
          - name: ubuntu-24.04-arm
            architecture: arm64
          - name: ubuntu-24.04
            architecture: x64
    steps:
      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: true
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: true
      - name: Start CI Docker container
        run: |
          docker run -d \
            --name ci-docker \
            opensearchstaging/ci-runner:ci-runner-al2-opensearch-build-v1 \
            sleep infinity

      - name: Wait for container to be ready
        run: |
          until docker exec ci-docker true 2>/dev/null; do
            echo "Waiting for container..."
            sleep 1
          done
          echo "Container is ready!"
          # docker exec --user ci-runner ci-docker bash -c "cd /home/ci-runner && mkdir -p /home/ci-runner/.gradle/caches && rm -rf /home/ci-runner/.gradle/caches/* && ls -laR /home/ci-runner/.gradle"

      - name: Debug disk space
        run: |
          echo "=== Runner disk ==="
          df -h

          echo "=== Inside container ==="
          docker exec ci-docker df -h / /tmp /home/ci-runner

      - name: Prepare script to run inside container
        run: |
          mkdir -p ${GITHUB_WORKSPACE}/scripts
          echo """
          #!/bin/bash
          export JAVA_HOME=/opt/java/openjdk-21
          git clone https://github.com/opensearch-project/opensearch-build.git
          cd opensearch-build
          # Modify build configuration to use patched OpenSearch
          if [ ! -f manifests/${{ inputs.open-search-tag }}/opensearch-${{ inputs.open-search-tag }}.yml ]; then
            echo "Error: Build manifest for OpenSearch tag ${{ inputs.open-search-tag }} does not exist."
            exit 1
          fi
          sed -i '
          / *- *name: *OpenSearch/,/^[[:space:]]*-/ {
          s|^\([[:space:]]*\)repository:.*|\1repository: https://github.com/${{ github.repository }}.git|
          s|^\([[:space:]]*\)ref:.*|\1ref: ${{ env.custom_branch }}|
          }
          ' manifests/${{ inputs.open-search-tag }}/opensearch-${{ inputs.open-search-tag }}.yml
          ./build.sh manifests/${{ inputs.open-search-tag }}/opensearch-${{ inputs.open-search-tag }}.yml --platform linux -a ${{ matrix.platform.architecture }}
          ./assemble.sh tar/builds/opensearch/manifest.yml
          """ > ${GITHUB_WORKSPACE}/scripts/run-build.sh
          cat ${GITHUB_WORKSPACE}/scripts/run-build.sh
      - name: Run build & assemble scripts inside container
        run: |
          cat ${GITHUB_WORKSPACE}/scripts/run-build.sh | docker exec -i --user ci-runner ci-docker sh -c 'cat > /home/ci-runner/run-build.sh'
          docker exec --user ci-runner ci-docker bash -c "cd /home/ci-runner && chmod +x /home/ci-runner/run-build.sh && /home/ci-runner/run-build.sh"
      - name: Copy build artifacts from container
        run: |
          mkdir -p ${GITHUB_WORKSPACE}/build-artifacts/${{ matrix.platform.architecture }}
          docker cp ci-docker:/home/ci-runner/opensearch-build/tar/dist/opensearch/. ${GITHUB_WORKSPACE}/build-artifacts/${{ matrix.platform.architecture }}/
      - name: Upload OpenSearch build artifacts
        uses: actions/upload-artifact@v5
        with:
          name: opensearch-build-artifacts-${{ matrix.platform.architecture }}
          path: |
            ${{ github.workspace }}/build-artifacts/${{ matrix.platform.architecture }}/*.tar.gz
      - name: Execute integration tests (optional)
        if: ${{ inputs.integration-tests }}
        run: |
          echo "Triggering opensearch integration tests..."
          docker exec --user ci-runner ci-docker bash -c "cd /home/ci-runner/opensearch-build && mv -rf tar/* . && ./test.sh integ-test manifests/${{ inputs.open-search-tag }}/opensearch-${{ inputs.open-search-tag }}-test.yml"
  build-and-push-docker:
    uses: testpatchesorg/opensearch-patches/.github/workflows/docker-build.yaml@main
    needs: build-in-docker
    with:
      open-search-tag: ${{ inputs.open-search-tag }}
      docker-test: ${{ inputs.docker-test }}

  trigger-qubership-opensearch-build:
    if: ${{ inputs.trigger-qubership-opensearch-build == true }}
    name: "Trigger qubership-opensearch build"
    needs: [build-and-push-docker]
    runs-on: ubuntu-latest
    steps:
      - name: "Trigger ${{ github.event.repository.name }}/qubership-opensearch build"
        if: ${{ inputs.trigger-qubership-opensearch-build }}
        uses: netcracker/qubership-workflow-hub/actions/custom-event@v2.0.1
        with:
          github-token: ${{ secrets.GH_ACCESS_TOKEN }}
          owner: ${{ github.repository_owner }}
          repo: qubership-opensearch
          event-type: opensearch-patched-build
          client-payload: '{"custom_opensearch_version": "${{ env.default_custom_tag }}", "custom_branch": "${{ env.custom_branch }}"}'
