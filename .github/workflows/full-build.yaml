---

name: "Build full OpenSearch release"
on:
  workflow_dispatch:
    inputs:
      open-search-tag:
        type: string
        required: true
        description: "Tag in the opensearch-project/OpenSearch repository"
        default: "2.19.3"
      patches-dir:
        type: string
        description: "Direcory in this repository with patches"
        required: true
        default: "patches/2.19.3"
      tags:
        type: string
        description: "Comma separated list of tags to tag produced docker image"
        required: false
        default: "custom-patches-2.19.3"
      trigger-qubership-opensearch-build:
        type: boolean
        description: "Trigger qubership-opensearch build"
        default: true
        required: false
permissions:
  contents: read
env:
  custom_branch: "applied-patches-${{ github.event.inputs.open-search-tag }}-${{ github.run_id }}"
  default_custom_tag: "ghcr.io/${{ github.repository_owner }}/opensearch:${{ github.event.inputs.open-search-tag }}-custom-patches"
jobs:
  apply-patches:
    permissions:
      contents: write
    name: "Apply custom patches to OpenSearch"
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout OpenSearch"
        uses: actions/checkout@v5
        with:
          repository: opensearch-project/opensearch
          ref: ${{ inputs.open-search-tag }}
          path: opensearch
      - name: "Checkout this repository"
        uses: actions/checkout@v5
        with:
          ref: ${{ github.ref }}
          path: opensearch-custom-patches
      - name: "Apply patches"
        run: |
          cd ${GITHUB_WORKSPACE}/opensearch
          for p in ../opensearch-custom-patches/${{ inputs.patches-dir }}/*.patch; do
            echo "Applying $pâ€¦"
            git apply -p1 --ignore-space-change --ignore-whitespace "$p"
          done
      - name: Create a new branch and commit changes
        run: |
          cd ${GITHUB_WORKSPACE}/opensearch-custom-patches
          #rm -rf opensearch
          mv -f ${GITHUB_WORKSPACE}/opensearch/* .
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"
          git checkout -b "${{ env.custom_branch }}"
          git add .
          git commit -m "Applied custom patches to OpenSearch ${{ inputs.open-search-tag }}"
          git push origin "${{ env.custom_branch }}"
  build:
    strategy:
      fail-fast: false
      matrix:
        platform:
          - name: ubuntu-22.04-arm
            architecture: arm64
          - name: ubuntu-latest
            architecture: x64
    name: "Build OpenSearch with custom patches on ${{ matrix.platform.name }}"
    needs: apply-patches
    runs-on: ${{ matrix.platform.name }}
    steps:
      - name: "Set up JDK 21"
        uses: actions/setup-java@v5
        with:
          distribution: temurin
          java-version: '21'
      - uses: actions/setup-python@v6
        with:
          python-version: '3.9'
      - name: "Install prerequisites"
        run: |
          # Skip installing package docs {makes the man-db trigger much faster)
          sudo tee /etc/dpkg/dpkg.cfg.d/01_nodoc > /dev/null << 'EOF'
          path-exclude /usr/share/doc/*
          path-exclude /usr/share/man/*
          path-exclude /usr/share/info/*
          EOF
          pip install --user pipenv
          sudo apt-get update
          sudo apt-get install -y git wget tar unzip
          # libblas-dev liblapack-dev
      - name: "Install prerequisites depend on architecture"
        run: |
          if [ "${{ matrix.platform.name }}" == "ubuntu-22.04-arm" ]; then
            sudo apt-get install -y libblas-dev liblapack-dev
          else
            sudo apt-get install -y libopenblas-dev libatlas-base-dev gcc-10 g++-10 gfortran-10
            sudo update-alternatives --install /usr/bin/gcc10-gcc gcc /usr/bin/gcc-10 200
            sudo update-alternatives --install /usr/bin/gcc10-g++ g++ /usr/bin/g++-10 200
            sudo update-alternatives --install /usr/bin/gcc10-gfortran gfortran /usr/bin/gfortran-10 200
            # CC=gcc10-gcc CXX=gcc10-g++ FC=gcc10-gfortran
          fi
      - name: "Checkout opensearch-project/opensearch-build"
        uses: actions/checkout@v5
        with:
          repository: opensearch-project/opensearch-build
          ref: main
          path: opensearch-build
      - name: "Modify build configuration to use patched OpenSearch"
        run: |
          cd ${GITHUB_WORKSPACE}/opensearch-build
          if [ ! -f manifests/${{ inputs.open-search-tag }}/opensearch-${{ inputs.open-search-tag }}.yml ]; then
            echo "Error: Build manifest for OpenSearch tag ${{ inputs.open-search-tag }} does not exist."
            exit 1
          fi
          sed -i '
          / *- *name: *OpenSearch/,/^[[:space:]]*-/ {
          s|^\([[:space:]]*\)repository:.*|\1repository: https://github.com/${{ github.repository }}.git|
          s|^\([[:space:]]*\)ref:.*|\1ref: ${{ env.custom_branch }}|
          }
          ' manifests/${{ inputs.open-search-tag }}/opensearch-${{ inputs.open-search-tag }}.yml
      - name: "Build OpenSearch"
        run: |
          cd ${GITHUB_WORKSPACE}/opensearch-build
          ./build.sh manifests/${{ inputs.open-search-tag }}/opensearch-${{ inputs.open-search-tag }}.yml --platform linux -a "${{ matrix.platform.architecture }}"
      - name: "Find build manifest"
        run: |
          find ${GITHUB_WORKSPACE}/opensearch-build -name "*.yml"
      - name: "Assemble OpenSearch"
        run: |
          cd ${GITHUB_WORKSPACE}/opensearch-build
          ./assemble.sh tar/builds/opensearch/manifest.yml
      - name: "Upload OpenSearch build artifacts"
        uses: actions/upload-artifact@v5
        with:
          name: opensearch-build-artifacts-${{ matrix.platform.architecture }}
          path: |
            ${{ github.workspace }}/opensearch-build/tar/dist/opensearch/*.tar.gz
  build-and-push-docker:
    permissions:
      contents: read
      packages: write
    strategy:
      fail-fast: false
      matrix:
        platform:
          - name: ubuntu-22.04-arm
            architecture: arm64
          - name: ubuntu-latest
            architecture: x64
    name: "Build and push Docker image for OpenSearch on ${{ matrix.platform.name }}"
    needs: build
    runs-on: ${{ matrix.platform.name }}
    steps:
      - name: "Checkout openserch-project/opensearch-build"
        uses: actions/checkout@v5
        with:
          repository: opensearch-project/opensearch-build
          ref: main
          path: ${{ github.workspace }}/opensearch-build
      - name: "Download OpenSearch build artifacts"
        uses: actions/download-artifact@v6
        with:
          name: opensearch-build-artifacts-${{ matrix.platform.architecture }}
          path: ${{ github.workspace }}/opensearch-build/tar/dist/
      - name: "Find the OpenSearch tarball"
        id: find-tarball
        run: |
          TARFILE=$(find ${GITHUB_WORKSPACE}/opensearch-build/tar/dist/ -name opensearch-*.tar.gz | head -n 1)
          if [ -z "$TARFILE" ]; then
            echo "Error: OpenSearch tarball not found!"
            exit 1
          fi
          echo "TARFILE=$TARFILE" >> $GITHUB_ENV
      - name: "Set up Docker Buildx"
        uses: docker/setup-buildx-action@v3

      - name: "Build and push Docker image"
        run: |
          cd ${GITHUB_WORKSPACE}/opensearch-build/docker/release
          chmod +x ./build-image-multi-arch.sh
          ./build-image-single-arch.sh -v ${{ inputs.open-search-tag }} -f ./dockerfiles/opensearch.al2.dockerfile -p opensearch -a "${{ matrix.platform.architecture }}" -t ${{ env.TARFILE }}
      - name: "Login to GitHub Container Registry"
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: "Tag and push additional Docker tags"
        run: |
          docker tag opensearch:${{ inputs.open-search-tag }} ${{ env.default_custom_tag }}
          docker push ${{ env.default_custom_tag }}
          IFS=',' read -r -a TAGS_ARRAY <<< "${{ inputs.tags }}"
          for TAG in "${TAGS_ARRAY[@]}"; do
            docker tag opensearch:${{ inputs.open-search-tag }} ghcr.io/${{ github.repository_owner }}/opensearch:$TAG
            docker push ghcr.io/${{ github.repository_owner }}/opensearch:$TAG
          done
  trigger-qubership-opensearch-build:
    if: ${{ inputs.trigger-qubership-opensearch-build == true }}
    name: "Trigger qubership-opensearch build"
    needs: build-and-push-docker
    runs-on: ubuntu-latest
    steps:
      - name: "Trigger ${{ github.event.repository.name }}/qubership-opensearch build"
        if: ${{ inputs.trigger-qubership-opensearch-build }}
        uses: netcracker/qubership-workflow-hub/actions/custom-event@v2.0.1
        with:
          github-token: ${{ secrets.GH_ACCESS_TOKEN }}
          owner: ${{ github.repository_owner }}
          repo: qubership-opensearch
          event-type: opensearch-patched-build
          client-payload: '{"custom_opensearch_version": "${{ env.default_custom_tag }}"}'
